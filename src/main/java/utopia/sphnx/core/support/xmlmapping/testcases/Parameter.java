//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.09.26 at 06:19:31 PM IST 
//


package utopia.sphnx.core.support.xmlmapping.testcases;


import conversion.setup.Configurations;
import utopia.sphnx.dataconversion.parsing.Parser;

import javax.xml.bind.annotation.*;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;simpleContent>
 *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
 *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/extension>
 *   &lt;/simpleContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "value"
})
@XmlRootElement(name = "parameter")
public class Parameter {

    @XmlValue
    protected String value;
    @XmlAttribute(name = "name")
    protected String name;

    /**
     * Gets the value of the value property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */

    //used to get the actual value entered prior to converting metadata or keywords
    public String getActualValue() {
        return value;
    }

    public String getValue() {
//        boolean storeToEC = false;
        String retVal;
        String key = "";
        if(value.contains(Configurations.KWMD_PREFIX) &&
                value.contains(Configurations.KWMD_SUFFIX)) {
//            storeToEC = true;
            key = value.replaceAll(Configurations.KWMD_PREFIX, "");
            key = key.replaceAll(Configurations.KWMD_SUFFIX, "");
        }
        Parser p = new Parser();
        retVal = p.replaceDataReferenceInString(value, false);

//        if(storeToEC) {
//            setECValue(key.trim(), retVal);
//        }
        return retVal;
    }

    public String getValue(Boolean toLog) {
//        boolean storeToEC = false;
        String retVal;
        String key = "";
        if(value.contains(Configurations.KWMD_PREFIX) &&
                value.contains(Configurations.KWMD_SUFFIX)) {
//            storeToEC = true;
            key = value.replaceAll(Configurations.KWMD_PREFIX, "");
            key = key.replaceAll(Configurations.KWMD_SUFFIX, "");
        }
        Parser p = new Parser();
        retVal = p.replaceDataReferenceInString(value, toLog);

//        if(storeToEC) {
//            setECValue(key.trim(), retVal);
//        }
        return retVal;
    }

    /**
     * Sets the value of the value property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setValue(String value) {
        this.value = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }


//    public boolean setECValue(String key, String value) {
//        if (key.trim().length() > 0) {
//            try {
//                ExecutionContext.setECValue(key, value);
//                ExecutionContext.writeToECFile();
//                return true;
//            } catch (Exception e) {
//                return false;
//            }
//        } else {
//            return false;
//        }
//    }
}
