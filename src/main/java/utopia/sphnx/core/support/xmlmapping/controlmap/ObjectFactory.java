//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.05.24 at 10:46:18 PM IST 
//


package utopia.sphnx.core.support.xmlmapping.controlmap;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the utopia.sphnx.testcases package.
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _Context_QNAME = new QName("", "Context");
    private final static QName _ObjectType_QNAME = new QName("", "ObjectType");
    private final static QName _LogicalName_QNAME = new QName("", "LogicalName");
    private final static QName _Parent_QNAME = new QName("", "Parent");
    private final static QName _Descriptor_QNAME = new QName("", "Descriptor");
    private final static QName _Interface_QNAME = new QName("", "Interface");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: utopia.sphnx.testcases
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link ControlMap }
     * 
     */
    public ControlMap createControlMap() {
        return new ControlMap();
    }

    /**
     * Create an instance of {@link ExecutionMap }
     * 
     */
    public ExecutionMap createExecutionMap() {
        return new ExecutionMap();
    }

    /**
     * Create an instance of {@link Control }
     * 
     */
    public Control createControl() {
        return new Control();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Context")
    public JAXBElement<String> createContext(String value) {
        return new JAXBElement<String>(_Context_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "ObjectType")
    public JAXBElement<String> createObjectType(String value) {
        return new JAXBElement<String>(_ObjectType_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "LogicalName")
    public JAXBElement<String> createLogicalName(String value) {
        return new JAXBElement<String>(_LogicalName_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Parent")
    public JAXBElement<String> createParent(String value) {
        return new JAXBElement<String>(_Parent_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Descriptor")
    public JAXBElement<String> createDescriptor(String value) {
        return new JAXBElement<String>(_Descriptor_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Interface")
    public JAXBElement<String> createInterface(String value) {
        return new JAXBElement<String>(_Interface_QNAME, String.class, null, value);
    }

}
